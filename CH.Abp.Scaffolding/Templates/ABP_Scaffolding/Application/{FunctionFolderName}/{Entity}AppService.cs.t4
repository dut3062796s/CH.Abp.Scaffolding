<#@ template language="C#" HostSpecific="True" Debug="False" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="CH.Abp.Scaffolding.Models" #>
<#@ parameter type="System.String" name="EntityNamespace" #>
<#@ parameter type="System.String" name="ModuleNamespace" #>
<#@ parameter type="System.String" name="ModuleName" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ parameter type="System.String" name="FunctionName" #>
<#@ parameter type="System.String" name="ProjectName" #>
<#@ parameter type="System.Boolean" name="AllowBatchDelete" #>
<#@ parameter type="System.Boolean" name="IsDisplayOrderable" #>
<#@ parameter type="CH.Abp.Scaffolding.Models.MetaTableInfo" name="DtoMetaTable" #>
<#@ Include File="../../CSharpHelpers.t4" #>
<#@ output extension="cs" #><#
    var entityName = ToCamelCase(EntityName);
#>
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Abp.Application.Services.Dto;
using Abp.AutoMapper;
using Abp.Domain.Repositories;
using Abp.Domain.Uow;
using Abp.Linq.Extensions;
using Abp.Extensions;
using System.Data.Entity;
using <#= ModuleNamespace #>.Dto;
using CH.Spartan.Infrastructure;
namespace <#= ModuleNamespace #>
{
	
    public class <#= EntityName #>AppService : <#= ProjectName #>AppServiceBase, I<#= EntityName #>AppService
    {
	    private readonly <#= EntityName #>Manager _<#= entityName #>Manager;
	    private readonly IRepository<<#= EntityName #>> _<#= entityName #>Repository;
        public <#= EntityName #>AppService(IRepository<<#= EntityName #>> <#= entityName #>Repository,<#= EntityName #>Manager <#= entityName #>Manager)
        {
		    _<#= entityName #>Repository = <#= entityName #>Repository;
            _<#= entityName #>Manager = <#= entityName #>Manager;
        }

		public async Task<Get<#= EntityName #>Output> Get<#= EntityName #>Async(IdInput input)
        {
            var result = await _<#= entityName #>Repository.GetAsync(input.Id);
            return new Get<#= EntityName #>Output(result.MapTo<Get<#= EntityName #>Dto>());
        }

        public async Task<ListResultOutput<Get<#= EntityName #>ListDto>> Get<#= EntityName #>ListAsync(Get<#= EntityName #>ListInput input)
        {
            var list = await _<#= entityName #>Repository.GetAll()
            	.WhereIf(!input.SearchText.IsNullOrEmpty(),p => p.Name.Contains(input.SearchText))
                .OrderBy(input)
				.Take(input)
                .ToListAsync();
            return new ListResultOutput<Get<#= EntityName #>ListDto>(list.MapTo<List<Get<#= EntityName #>ListDto>>());
        }

        public async Task<PagedResultOutput<Get<#= EntityName #>ListDto>> Get<#= EntityName #>ListPagedAsync(Get<#= EntityName #>ListPagedInput input)
        {
            var query = _<#= entityName #>Repository.GetAll();
                //.WhereIf(!input.SearchText.IsNullOrEmpty(), p => p.Name.Contains(input.SearchText));

            var count = await query.CountAsync();

            var list = await query.OrderBy(input).PageBy(input).ToListAsync();

            return new PagedResultOutput<Get<#= EntityName #>ListDto>(count, list.MapTo<List<Get<#= EntityName #>ListDto>>());
        }

        public async Task<ListResultOutput<ComboboxItemDto>> Get<#= EntityName #>ListAutoCompleteAsync(Get<#= EntityName #>ListInput input)
        {
            var list = await _<#= entityName #>Repository.GetAll()
                .WhereIf(!input.SearchText.IsNullOrEmpty(),p => p.Name.Contains(input.SearchText))
                .OrderBy(input)
                .Take(input)
                .ToListAsync();

            return
                new ListResultOutput<ComboboxItemDto>(
                    list.Select(p => new ComboboxItemDto {Value = p.Id.ToString(), DisplayText = p.Name}).ToList());
        }

        public async Task Create<#= EntityName #>Async(Create<#= EntityName #>Input input)
        {
            var <#= entityName #> = input.<#= EntityName #>.MapTo<<#= EntityName #>>();
            await _<#= entityName #>Repository.InsertAsync(<#= entityName #>);
        }
        public async Task Update<#= EntityName #>Async(Update<#= EntityName #>Input input)
        {
            var <#= entityName #> = await _<#= entityName #>Repository.GetAsync(input.<#= EntityName #>.Id);
            input.<#= EntityName #>.MapTo(<#= entityName #>);
            await _<#= entityName #>Repository.UpdateAsync(<#= entityName #>);
        }
	
        public GetCreate<#= EntityName #>Output GetCreate<#= EntityName #>()
        {
            return new GetCreate<#= EntityName #>Output(new Create<#= EntityName #>Dto());
        }
        
		public async Task<GetUpdate<#= EntityName #>Output> GetUpdate<#= EntityName #>Async(IdInput input)
        {
            var result = await _<#= entityName #>Repository.GetAsync(input.Id);
            return new GetUpdate<#= EntityName #>Output(result.MapTo<Update<#= EntityName #>Dto>());
        }

        public async Task Delete<#= EntityName #>Async(List<IdInput> input)
        {
		   await _<#= entityName #>Manager.DeleteByIdsAsync(input.Select(p => p.Id));
        }
    }
}